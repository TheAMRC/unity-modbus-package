@startuml
hide <<light_variant>> stereotype
hide <<dark_variant>> stereotype
' skinparam shadowing false

!define FONTNAME "Verdana"
!define FONTSIZE 14

!if (%variable_exists("$black_and_white"))
  !define LIGHT_BG white
  !define DARK_BG white
!else 
  !define LIGHT_BG f2f2f2
  !define DARK_BG 003f82
!endif


!if (%variable_exists("$black_and_white"))
  !define LIGHT_BORDER black
!else 
  !define LIGHT_BORDER white
!endif

!define DARK_BORDER black

!if (%variable_exists("$black_and_white"))
  !define LIGHT_FONT black
!else
  !define LIGHT_FONT white
!endif

!define DARK_FONT black

!if (%variable_exists("$black_and_white"))
  !define LIGHT_ARROWCOLOR black
!else
  !define LIGHT_ARROWCOLOR white
!endif
!define DARK_ARROWCOLOR black

!if (%variable_exists("$black_and_white"))
  !define LIGHT_ARROWFONTCOLOR black
!else
  !define LIGHT_ARROWFONTCOLOR white
!endif

!define DARK_ARROWFONTCOLOR black

skinparam backgroundColor white
skinparam stereotypeCBackgroundColor LIGHT_BG

!procedure dark_font_style()
  fontColor DARK_FONT
  ' dark_variant refers to dark background variant
  ' so font needs to light
  <<dark_variant>>fontColor LIGHT_FONT
  fontName FONTNAME
  fontSize FONTSIZE
  stereotypeFontColor DARK_FONT
  <<dark_variant>>stereotypeFontColor LIGHT_FONT
  stereotypeFontSize FONTSIZE
!endfunction

!procedure light_font_style()
  fontColor LIGHT_FONT
  <<light_variant>>fontColor DARK_FONT
  fontName FONTNAME
  fontSize FONTSIZE
  stereotypeFontColor LIGHT_FONT
  <<light_variant>>stereotypeFontColor DARK_FONT
  stereotypeFontSize FONTSIZE
!endfunction

!procedure dark_basic_style()
  backgroundColor DARK_BG
  <<light_variant>>backgroundColor LIGHT_BG
  borderColor DARK_BORDER
!endfunction

!procedure light_basic_style()
  backgroundColor LIGHT_BG
  <<dark_variant>>backgroundColor DARK_BG
  borderColor DARK_BORDER
!endfunction

!procedure dark_arrow_style()
  arrowColor DARK_ARROWCOLOR
  arrowFontName FONTNAME
  arrowFontColor DARK_ARROWFONTCOLOR
  arrowFontSize FONTSIZE
!endfunction

!procedure light_arrow_style()
  arrowColor LIGHT_ARROWCOLOR
  arrowFontName FONTNAME
  arrowFontColor LIGHT_ARROWFONTCOLOR
  arrowFontSize FONTSIZE
!endfunction

'##############################
' Class diagrams
'##############################

skinparam circledCharacter {
  radius 8
  fontSize FONTSIZE
  fontName FONTNAME
  fontColor LIGHT_FONT
}

skinparam class {
  light_basic_style()
  light_font_style()
  dark_arrow_style()

  attributeFontColor DARK_FONT
  attributeFontSize FONTSIZE
  attributeIconSize FONTSIZE
}

skinparam StereotypeCBackgroundColor LIGHT_BG
skinparam ClassHeaderBackgroundColor DARK_BG
skinparam ClassBackgroundColor LIGHT_BG
skinparam ClassBorderColor DARK_BORDER
skinparam ClassStereotypeFontColor LIGHT_FONT

'##############################
' Sequence diagrams
'##############################
' skinparam ConditionStyle {
'   dark_basic_style()
'   light_font_style()
' }

skinparam sequence {
  dark_font_style()
  dark_arrow_style()

  lifeLineBorderColor DARK_BORDER
  lifeLineBackgroundColor LIGHT_BG
  
}

'##############################
' Component/Deployment diagrams
'##############################

skinparam actor {
  light_basic_style()
  dark_font_style()
}
skinparam agent {
  dark_basic_style()
  light_font_style()
}
skinparam artifact {
  dark_basic_style()
  light_font_style()
  
}
skinparam boundary {
  light_basic_style()
  dark_font_style()
}
skinparam card {
  dark_basic_style()
  light_font_style()
}
skinparam cloud {
  dark_basic_style()
  light_font_style()
}
skinparam collections {
  dark_basic_style()
  light_font_style()  
}
skinparam component {
  dark_basic_style()
  light_font_style()
}
skinparam control {
  light_basic_style()
  dark_font_style()
}
skinparam database {
  dark_basic_style()
  light_font_style()
}
skinparam entity {
  light_basic_style()
  dark_font_style()
}
skinparam file {
  dark_basic_style()
  light_font_style()
}
skinparam folder {
  light_basic_style()
  dark_font_style()
}
skinparam frame {
  light_basic_style()
  dark_font_style()
}
skinparam interface {
  light_basic_style()
  dark_font_style()
}
skinparam node {
  dark_basic_style()
  light_font_style()
}
skinparam package {
  light_basic_style()
  dark_font_style()
}
skinparam partition{
  light_basic_style()
  dark_font_style()
}
skinparam participant {
  dark_basic_style()
  light_font_style()
}
skinparam queue {
  dark_basic_style()
  light_font_style()
}
skinparam stack {
  dark_basic_style()
  light_font_style()
}
skinparam rectangle {
  dark_basic_style()
  light_font_style()
}
skinparam storage {
  dark_basic_style()
  light_font_style()
}
skinparam usecase {
  dark_basic_style()
  light_font_style()
}


'##############################
' Activity diagrams
'##############################
skinparam activity {
  dark_basic_style()
  light_font_style()
  dark_arrow_style()
}

' Specific formatting for activity decision nodes
skinparam {
  ActivityDiamondBackgroundColor DARK_BG
  ActivityDiamondBorderColor DARK_BORDER
  ActivityDiamondFontColor LIGHT_FONT
  ActivityDiamondFontName FONTNAME
  ActivityDiamondFontSize FONTSIZE
}

'##############################
' State diagrams
'##############################

skinparam state {
  dark_basic_style()
  light_font_style()
  dark_arrow_style()
}
skinparam StateAttributeFontColor LIGHT_FONT


'##############################
' Object Diagrams
'##############################

skinparam object {
  dark_basic_style()
  light_font_style()
  dark_arrow_style()

  attributeFontColor LIGHT_FONT
  attributeFontSize FONTSIZE
  attributeIconSize FONTSIZE
}
skinparam note {
  borderColor DARK_BORDER
}
@enduml
